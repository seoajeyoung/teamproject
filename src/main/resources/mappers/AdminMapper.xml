<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.mappers.AdminMapper">

	<!-- ====================================================================================== -->
	<!-- 회원목록 -->

	<select id="getMemberList"
		resultType="com.itwillbs.domain.AdminDTO">
		select * from MEMBERS
	</select>

	<!-- ====================================================================================== -->

	<!-- 회원상세정보 -->

	<select id="getMemberInfo"
		resultType="com.itwillbs.domain.AdminDTO">
		select M.*, P.*
		from MEMBERS M
		left join POINT P ON
		M.MEM_NUM
		= P.MEM_NUM
		where M.MEM_NUM = #{MEM_NUM};
	</select>

	<!-- ====================================================================================== -->

	<!-- 포인트지급항목 -->
	<select id="getDetailList"
		resultType="com.itwillbs.domain.AdminDTO">
		select * from DETAIL;
	</select>

	<!-- ====================================================================================== -->

	<!-- 회원정보수정 -->
	<update id="updateMember">
		update MEMBERS set
		MEM_PASS = #{member_pass},
		MEM_NAME
		= #{member_name},
		MEM_PHONE = #{member_phone},
		MEM_EMAIL =
		#{member_email},
		MEM_GRADE =
		CASE
		WHEN (select
		point_cumulativeP from
		POINT where MEM_NUM =
		#{member_num}) >= 50000
		THEN 'Red Carpet(SVIP)'
		WHEN (select point_cumulativeP from POINT where MEM_NUM =
		#{member_num}) >= 30000 THEN 'Gold Seat(VVIP)'
		ELSE 'Silver
		Ticket(VIP)'
		END
		where MEM_NUM =
		#{member_num}
	</update>


	<!-- 포인트지급,차감 -->
	<update id="updatePoint">
		update POINT set point_currentP =
		GREATEST(point_currentP + #{sPoint}, 0),
		point_cumulativeP = CASE
		WHEN
		#{sPoint} >= 0 THEN point_cumulativeP + #{sPoint}
		ELSE
		point_cumulativeP
		END
		where MEM_NUM = #{member_num}
	</update>

	<!-- 포인트지급,차감 내역 -->
	<update id="updatePointHistory">
		update POINT set PO_HIS =
		CONCAT(IFNULL(point_history, ''),
		case
		WHEN LENGTH(IFNULL(point_history,
		'')) > 0 THEN CHAR(10) -- 줄바꿈 추가
		ELSE ''
		END,
		DATE_FORMAT(NOW(),
		'%Y-%m-%d %H:%i'), ' / 지급(차감)된 포인트: ', #{sPoint}, ' / ',
		#{point_detail})
		where MEM_NUM = #{member_num}
	</update>

	<!-- ====================================================================================== -->

	<!-- 회원탈퇴(6개월 유예) -->

	<update id="respiteMember">
		update MEMBERS set MEM_STATUS = '탈퇴유예',
		MEM_RESPITE =
		CURRENT_TIMESTAMP,
		MEM_OUT =
		DATE_ADD(CURRENT_TIMESTAMP, INTERVAL 6
		MONTH)
		where MEM_NUM =
		#{member_num}
	</update>

	<!-- ====================================================================================== -->

	<!-- 회원정보복구 -->

	<update id="restoreMember">
		update MEMBERS set MEM_STATUS = '회원',
		MEM_RESPITE =
		NULL,
		MEM_OUT = NULL
		where MEM_NUM =
		#{member_num}
	</update>

	<!-- status 값 나중에 default = '회원' -->

	<!-- ====================================================================================== -->

	<!-- 이메일리스트 -->

	<select id="getEmailList"
		resultType="com.itwillbs.domain.AdminDTO">
		select * from ADMINMAIL;
	</select>


	<!-- ====================================================================================== -->

	<!-- 영화삽입 -->
	<insert id="saveMovie"
		parameterType="com.itwillbs.domain.AdminDTO">
		insert into MOVIE (title, titleEng,
		direcotrNm, actorNm,
		nation,
		genre, plot, runtime, rating, releaseDate,
		posterUrl, stillUrl,
		vodUrl,
		soundtrack, themeSong)
		values
		(#{title}, #{titleEng},
		#{directorNm},
		#{actorNm}, #{nation}, #{genre}, #{plot}, #{runtime},
		#{rating},
		#{releaseDate}, #{posterUrl}, #{stillUrl}, #{vodUrl},
		#{soundtrack}, #{themeSong})
	</insert>

	<select id="checkMovieExists" parameterType="String"
		resultType="boolean">
		select exists (select 1 from MOVIE where title = #{title})
	</select>

	<update id="resetMovieRank"
		parameterType="com.itwillbs.domain.AdminDTO">

		UPDATE MOVIE m
		SET m.rank = null
		WHERE m.rank is not null;

	</update>


	<update id="updateMovieRank"
		parameterType="com.itwillbs.domain.AdminDTO">
		UPDATE MOVIE as t1
		JOIN (
		<foreach collection="list" item="item" separator="UNION ALL">
			SELECT
			#{item.movieNm} as title, #{item.rank} as `rank`
		</foreach>
		) as t2
		ON TRIM(REGEXP_REPLACE(t1.title, '[^[:alnum:][:space:]]+', ''))
		=
		TRIM(REGEXP_REPLACE(t2.title, '[^[:alnum:][:space:]]+', ''))
		SET
		t1.rank = t2.rank;
	</update>



	<!-- ====================================================================================== -->

	<!-- 영화목록 -->

	<select id="getMovieList"
		resultType="com.itwillbs.domain.MovieDTO">
		select * from MOVIE
	</select>

	<!-- 영화 상세정보 -->
	<select id="getMovieInfo"
		resultType="com.itwillbs.domain.MovieDTO"
		parameterType="java.lang.Integer">
		SELECT MOVIE_NUM, title, titleEng, direcotrNm, actorNm,
		nation, genre,
		releaseDate, posterUrl, plot, runtime, rating,
		soundtrack, themeSong
		FROM MOVIE m
		Where MOVIE_NUM = #{movienum}
	</select>

	<!-- 영화정보 업데이트 -->
	<update id="movieupdate"
		parameterType="com.itwillbs.domain.MovieDTO">
		update MOVIE set title = #{title},
		titleEng =
		#{titleEng},
		direcotrNm = #{direcotrNm},
		actorNm = #{actorNm},
		genre =
		#{genre},
		rating = #{rating},
		runtime = #{runtime},,
		posterUrl =
		#{posterUrl},
		releaseDate = #{releaseDate},
		themsSong = #{themsSong},
		soundtrack = #{soundtrack},
		plot = #{plot}
		where MOVIE_NUM =
		#{MOVIE_NUM}
	</update>

	<delete id="moviedelete"
		parameterType="com.itwillbs.domain.MovieDTO">
		DELETE FROM MOVIE WHERE MOVIE_NUM = #{MOVIE_NUM}
	</delete>







	<!-- ====================================================================================== -->

	<select id="getRegionList"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT DISTINCT TH_REGION FROM THEATER
	</select>

	<select id="getTheaterList"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT * FROM THEATER
	</select>

	<select id="getNameList" parameterType="String"
		resultType="String">
		SELECT DISTINCT TH_NAME FROM THEATER WHERE TH_REGION =
		#{TH_REGION}
	</select>

	<select id="getCinemaList" parameterType="String"
		resultType="String">
		SELECT DISTINCT TH_NUMBER
		FROM THEATER
		WHERE TH_NAME =
		#{TH_NAME}
	</select>

	<select id="getMovieNameList" parameterType="map"
		resultType="hashmap">
		SELECT TITLE, TITLEENG, RUNTIME
		FROM MOVIE
		WHERE
		REPLACE(releaseDate, '-', '') BETWEEN #{threeMonthsAgo} AND
		#{releaseDate}
	</select>

	<!-- 런타임 찾기 -->
	<select id="findRuntime" parameterType="String"
		resultType="String">
		SELECT RUNTIME FROM MOVIE WHERE TITLE = #{title}
	</select>


	<!-- 런타임 업데이트 -->
	<update id="updateRuntime" parameterType="map">
		UPDATE MOVIE SET
		RUNTIME = #{runtime} WHERE TITLE = #{title}
	</update>


	<!-- 상영일정저장 -->
	<insert id="insertSchedule" parameterType="map">
		<!-- CINEMA 테이블에 데이터 삽입 -->
		INSERT INTO CINEMA (TH_NUM, MOVIE_NUM)
		SELECT
		(SELECT TH_NUM FROM
		THEATER WHERE TH_REGION = #{TH_REGION} AND TH_NAME =
		#{TH_NAME} AND
		TH_NUMBER = #{TH_NUMBER}),
		(SELECT MOVIE_NUM FROM MOVIE WHERE TITLE =
		#{title})
		WHERE NOT EXISTS (
		SELECT 1 FROM CINEMA
		WHERE TH_NUM = (SELECT
		TH_NUM FROM THEATER WHERE TH_REGION = #{TH_REGION}
		AND TH_NAME =
		#{TH_NAME} AND TH_NUMBER = #{TH_NUMBER})
		AND MOVIE_NUM = (SELECT
		MOVIE_NUM FROM MOVIE WHERE TITLE = #{title})
		);
	</insert>

	<insert id="insertScreenTime" parameterType="map">
		INSERT INTO SCREEN
		(CI_NUM, SC_TIME, SC_TIME_END)
		VALUES (
		(SELECT CI_NUM
		FROM CINEMA
		WHERE
		TH_NUM = (SELECT TH_NUM FROM THEATER WHERE TH_REGION = #{TH_REGION}
		AND TH_NAME = #{TH_NAME}
		AND TH_NUMBER = #{TH_NUMBER})
		AND MOVIE_NUM =
		(SELECT MOVIE_NUM FROM MOVIE WHERE TITLE = #{title})),
		#{SC_TIME},
		#{SC_TIME_END}
		);
	</insert>

	<update id="updateSchedule" parameterType="map">
		UPDATE CINEMA
		SET
		TH_NUM = (SELECT TH_NUM FROM THEATER WHERE TH_REGION = #{TH_REGION}
		AND
		TH_NAME = #{TH_NAME}),
		MOVIE_NUM = (SELECT MOVIE_NUM FROM MOVIE
		WHERE TITLE = #{title}),
		CI_NUMBER = #{CI_NUMBER}
		WHERE CI_NUM =
		#{CI_NUM};
	</update>


	<select id="getScheduleList"
		resultType="com.itwillbs.domain.ScheduleDTO">
		SELECT T.TH_REGION, T.TH_NAME, T.TH_NUMBER, M.TITLE,
		S.SC_TIME, S.SC_TIME_END, C.CI_NUM, S.SC_NUM
		FROM THEATER T
		JOIN CINEMA C ON
		T.TH_NUM = C.TH_NUM
		JOIN MOVIE M ON C.MOVIE_NUM = M.MOVIE_NUM
		JOIN
		SCREEN S ON C.CI_NUM = S.CI_NUM
	</select>

	<select id="getScheduleByCinema" parameterType="map"
		resultType="com.itwillbs.domain.ScheduleDTO">
		SELECT T.TH_REGION, T.TH_NAME, T.TH_NUMBER, M.TITLE,
		S.SC_TIME, S.SC_TIME_END
		FROM THEATER T
		JOIN CINEMA C ON T.TH_NUM = C.TH_NUM
		JOIN MOVIE M ON C.MOVIE_NUM = M.MOVIE_NUM
		JOIN SCREEN S ON C.CI_NUM = S.CI_NUM
		WHERE T.TH_REGION = #{TH_REGION}
		AND T.TH_NAME = #{TH_NAME}
		AND T.TH_NUMBER = #{TH_NUMBER}
		AND DATE_FORMAT(S.SC_TIME, '%Y-%m-%d') = DATE_FORMAT(#{runningDts}, '%Y-%m-%d')
	</select>

	<!-- SCREEN 테이블에서 삭제 -->
	<delete id="deleteScreenByCINum" parameterType="int">
		DELETE FROM
		SCREEN WHERE CI_NUM = #{CI_NUM};
	</delete>

	<!-- CINEMA 테이블에서 삭제 -->
	<delete id="deleteCinemaByCINum" parameterType="int">
		DELETE FROM
		CINEMA WHERE CI_NUM = #{CI_NUM};
	</delete>

	<select id="getBranchList" parameterType="map"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT DISTINCT
		T.TH_NUM,
		T.TH_REGION,
		T.TH_NAME,
		T.TH_ADDR,
		T.TH_NUMBER
		FROM
		THEATER T
		LEFT JOIN
		CINEMA C
		ON T.TH_NUM = C.TH_NUM;
	</select>

	<!-- 영문지역명 찾기 -->
	<select id="getfindAll" parameterType="String"
		resultType="com.itwillbs.domain.AdminDTO">
		<!-- SELECT DISTINCT -->
		<!-- T.TH_REGION, -->
		<!-- T.TH_NAME, -->
		<!-- T.TH_ADDR, -->
		<!-- T.TH_NUMBER -->
		<!-- FROM -->
		<!-- THEATER T -->
		<!-- LEFT JOIN -->
		<!-- CINEMA C -->
		<!-- ON T.TH_NUM = C.TH_NUM; -->
	</select>

	<insert id="insertTheater" parameterType="map">
		INSERT INTO THEATER
		(TH_REGION, TH_NAME, TH_ADDR, TH_NUMBER)
		VALUES (
		#{TH_REGION},
		#{TH_NAME},
		#{TH_ADDR},
		#{TH_NUMBER}
		);
	</insert>


	<update id="updateTheater" parameterType="map">
		UPDATE THEATER
		SET
		TH_REGION = #{TH_REGION},
		TH_NAME = #{TH_NAME},
		TH_ADDR = #{TH_ADDR},
		TH_NUMBER = #{TH_NUMBER}
		WHERE TH_NUM = #{TH_NUM};
	</update>

	<delete id="deleteTheater" parameterType="int">
		DELETE FROM THEATER
		WHERE TH_NUM = #{TH_NUM};
	</delete>


	<select id="checkStoreDetails" parameterType="map"
		resultType="map" useCache="false">
		SELECT EXISTS(SELECT 1 FROM STORE WHERE
		ST_NAME = #{ST_NAME}) AS nameExists,
		EXISTS(SELECT 1 FROM STORE WHERE
		ST_DETAIL = #{ST_DETAIL}) AS
		detailExists
	</select>

	<select id="getTypeList"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT
		CD.DETAIL_VALUE AS ST_TYPE
		FROM
		CODEDETAIL CD
		JOIN
		CODES
		C ON CD.CODE_NUM = C.CODE_NUM
		WHERE
		C.CODE_ID = 'ST'
	</select>


	<insert id="insertStore"
		parameterType="com.itwillbs.domain.AdminDTO">
		INSERT INTO STORE (ST_NAME, ST_DETAIL, ST_PRICE,
		ST_PICTURE, ST_TYPE, ST_CONST, ST_PERIOD)
		VALUES
		(#{ST_NAME},
		#{ST_DETAIL},
		#{ST_PRICE}, #{ST_PICTURE}, #{ST_TYPE}, #{ST_CONST},
		#{ST_PERIOD})
	</insert>

	<select id="getStoreList"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT * FROM STORE
	</select>


	<select id="getstoreInfo"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT ST_NUM, ST_NAME, ST_DETAIL, ST_PRICE, ST_PICTURE,
		ST_TYPE, ST_PERIOD, ST_CONST
		FROM STORE
		WHERE ST_NUM = #{ST_NUM}
	</select>

	<update id="updateStore"
		parameterType="com.itwillbs.domain.AdminDTO">
		UPDATE STORE
		SET
		ST_NAME = #{ST_NAME},
		ST_DETAIL =
		#{ST_DETAIL},
		ST_PRICE = #{ST_PRICE},
		ST_PICTURE = #{ST_PICTURE},
		ST_TYPE = #{ST_TYPE},
		ST_PERIOD = #{ST_PERIOD},
		ST_CONST = #{ST_CONST}
		WHERE ST_NUM = #{ST_NUM}
	</update>

	<delete id="deleteStore" parameterType="String">
		DELETE FROM STORE WHERE
		ST_NUM = #{ST_NUM}
	</delete>

	<select id="getBookinglist"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT
		TP.TP_NUM,
		TP.TP_PRICE,
		TP.TP_SEAT,
		TP.TP_TYPE,
		TP.TP_PAYMENT,
		TP.TP_TIME,
		M.MEM_ID,
		S.SC_TIME,
		S.SC_TIME_END,
		T.TH_NAME,
		T.TH_REGION,
		T.TH_NUMBER,
		MV.title
		FROM
		TICKETPAYMENT TP
		JOIN
		MEMBERS M ON
		TP.MEM_NUM = M.MEM_NUM
		JOIN
		SCREEN S ON TP.SC_NUM = S.SC_NUM
		JOIN
		CINEMA C
		ON S.CI_NUM = C.CI_NUM
		JOIN
		THEATER T ON C.TH_NUM = T.TH_NUM
		JOIN
		MOVIE MV
		ON C.MOVIE_NUM =
		MV.MOVIE_NUM
	</select>

	<select id="getBookinginfo"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT
		TP.TP_NUM,
		TP.TP_PRICE,
		TP.TP_SEAT,
		TP.TP_TYPE,
		TP.TP_PAYMENT,
		TP.TP_TIME,
		M.MEM_ID,
		S.SC_TIME,
		S.SC_TIME_END,
		T.TH_NAME,
		T.TH_REGION,
		T.TH_NUMBER,
		MV.title
		FROM
		TICKETPAYMENT TP
		JOIN
		MEMBERS M ON
		TP.MEM_NUM = M.MEM_NUM
		JOIN
		SCREEN S ON TP.SC_NUM = S.SC_NUM
		JOIN
		CINEMA C
		ON S.CI_NUM = C.CI_NUM
		JOIN
		THEATER T ON C.TH_NUM = T.TH_NUM
		JOIN
		MOVIE MV
		ON C.MOVIE_NUM =
		MV.MOVIE_NUM
		WHERE
		TP.TP_NUM = #{tp_NUM}
	</select>

	<select id="getStorePaymentlist"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT
		SP.SP_NUM,
		SP.PRODUCT_TOTAL_PRICE,
		SP.PAYMENT_DATE,
		S.ST_NAME,
		S.ST_TYPE,
		S.ST_CONST,
		M.MEM_ID
		FROM
		STOREPAYMENT SP
		JOIN
		STORE S
		ON SP.ST_NUM =
		S.ST_NUM
		JOIN
		MEMBERS M ON SP.MEM_NUM =
		M.MEM_NUM
	</select>

	<select id="getPaymentinfo"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT
		SP.SP_NUM,
		SP.PRODUCT_TOTAL_PRICE,
		SP.PAYMENT_DATE,
		S.ST_NAME,
		S.ST_TYPE,
		S.ST_CONST,
		M.MEM_ID
		FROM
		STOREPAYMENT SP
		JOIN
		STORE S
		ON SP.ST_NUM =
		S.ST_NUM
		JOIN
		MEMBERS M ON SP.MEM_NUM =
		M.MEM_NUM
		WHERE
		SP.SP_NUM = #{sp_num}
	</select>

	<!-- ====================================================================================== -->

	<select id="getStoreSalesSumByDate" resultType="Integer">
		SELECT SUM(PRODUCT_TOTAL_PRICE)
		FROM STOREPAYMENT
		WHERE PAYMENT_DATE >=
		#{startOfDay}
		AND PAYMENT_DATE <![CDATA[<]]>
		#{endOfDay}
	</select>

	<select id="getMovieSalesSumByDate" resultType="Integer">
		SELECT SUM(TP_PRICE)
		FROM TICKETPAYMENT
		WHERE TP_TIME >=
		#{startOfDay}
		AND TP_TIME <![CDATA[<]]>
		#{endOfDay}
	</select>

	<insert id="insertDailyTotalSales">
		INSERT INTO REVENUE (SALES_DATE, STORE_TOTALSALES,
		MOVIE_TOTALSALES, ALL_TOTALSALES)
		VALUES (#{yesterday},
		#{storeTotalSales}, #{movieTotalSales}, #{storeTotalSales} +
		#{movieTotalSales})
	</insert>


	<!-- =========================================================================================================== -->

	<select id="getSalesDataForWeek"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT SALES_DATE, STORE_TOTALSALES
		FROM REVENUE
		WHERE SALES_DATE >=
		#{startDate} AND SALES_DATE <![CDATA[<=]]>
		#{endDate}
		ORDER BY SALES_DATE ASC
	</select>

	<select id="getSalesDataForMonth"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT DATE_FORMAT(SALES_DATE, '%Y-%m') as SALES_DATE,
		SUM(STORE_TOTALSALES) as STORE_TOTALSALES
		FROM REVENUE
		WHERE
		SALES_DATE
		>= #{startMonth} AND SALES_DATE <![CDATA[<=]]>
		#{endMonth}
		GROUP BY
		DATE_FORMAT(SALES_DATE, '%Y-%m')
		ORDER BY SALES_DATE
		ASC
	</select>

	<!-- =========================================================================================================== -->

	<select id="getMovieSalesDataForWeek"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT SALES_DATE, MOVIE_TOTALSALES
		FROM REVENUE
		WHERE SALES_DATE >=
		#{startDate} AND SALES_DATE <![CDATA[<=]]>
		#{endDate}
		ORDER BY SALES_DATE ASC
	</select>

	<select id="getMovieSalesDataForMonth"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT DATE_FORMAT(SALES_DATE, '%Y-%m') as SALES_DATE,
		SUM(MOVIE_TOTALSALES) as MOVIE_TOTALSALES
		FROM REVENUE
		WHERE
		SALES_DATE
		>= #{startMonth} AND SALES_DATE <![CDATA[<=]]>
		#{endMonth}
		GROUP BY
		DATE_FORMAT(SALES_DATE, '%Y-%m')
		ORDER BY SALES_DATE
		ASC
	</select>

	<!-- =========================================================================================================== -->

	<select id="getAllSalesDataForWeek"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT SALES_DATE, ALL_TOTALSALES
		FROM REVENUE
		WHERE SALES_DATE >=
		#{startDate} AND SALES_DATE <![CDATA[<=]]>
		#{endDate}
		ORDER BY SALES_DATE ASC
	</select>

	<select id="getAllSalesDataForMonth"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT DATE_FORMAT(SALES_DATE, '%Y-%m') as SALES_DATE,
		SUM(ALL_TOTALSALES) as ALL_TOTALSALES
		FROM REVENUE
		WHERE
		SALES_DATE >=
		#{startMonth} AND SALES_DATE <![CDATA[<=]]>
		#{endMonth}
		GROUP BY
		DATE_FORMAT(SALES_DATE, '%Y-%m')
		ORDER BY SALES_DATE
		ASC
	</select>

	<select id="getAllSalesDataForYesterday"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT SALES_DATE, ALL_TOTALSALES
		FROM REVENUE
		WHERE SALES_DATE >=
		#{startOfDay} AND SALES_DATE <![CDATA[<=]]>
		#{endOfDay}
		ORDER BY SALES_DATE ASC
	</select>

	<select id="getAllSalesDataForOneMonth"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT DATE_FORMAT(SALES_DATE, '%Y-%m') as SALES_DATE,
		SUM(ALL_TOTALSALES) as ALL_TOTALSALES
		FROM REVENUE
		WHERE
		SALES_DATE >=
		#{startOfMonth} AND SALES_DATE <![CDATA[<=]]>
		#{endOfMonth}
		GROUP BY
		DATE_FORMAT(SALES_DATE, '%Y-%m')
		ORDER BY
		SALES_DATE
		ASC
	</select>

	<!-- =========================================================================================================== -->

	<select id="getMemberJoinDataForMonth"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT DATE_FORMAT(MEM_INPUT, '%Y-%m') as JOINMONTH,
		COUNT(*) as
		JOINMEMBER_COUNT
		FROM MEMBERS
		WHERE MEM_INPUT >= #{startMonth} AND
		MEM_INPUT <![CDATA[<=]]>
		#{endMonth}
		GROUP BY DATE_FORMAT(MEM_INPUT, '%Y-%m')
		ORDER BY
		DATE_FORMAT(MEM_INPUT, '%Y-%m') ASC
	</select>

	<select id="getMembersByAgeGroup"
		resultType="com.itwillbs.domain.AdminDTO">
		SELECT
		CASE
		WHEN TIMESTAMPDIFF(YEAR, MEM_BIRTH, CURDATE())
		BETWEEN 10 AND 19 THEN
		'10대'
		WHEN TIMESTAMPDIFF(YEAR, MEM_BIRTH,
		CURDATE()) BETWEEN 20 AND 29 THEN
		'20대'
		WHEN TIMESTAMPDIFF(YEAR,
		MEM_BIRTH, CURDATE()) BETWEEN 30 AND 39 THEN
		'30대'
		WHEN
		TIMESTAMPDIFF(YEAR, MEM_BIRTH, CURDATE()) BETWEEN 40 AND 49 THEN
		'40대'
		WHEN TIMESTAMPDIFF(YEAR, MEM_BIRTH, CURDATE()) BETWEEN 50 AND 59 THEN
		'50대'
		ELSE '60대 이상'
		END AS AGE_GROUP,
		COUNT(*) as AGE_GROUP_COUNT
		FROM
		MEMBERS
		GROUP BY AGE_GROUP
		ORDER BY AGE_GROUP
		ASC
	</select>



</mapper>
