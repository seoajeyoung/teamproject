<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="movieMapper">
	<!-- 영화 리스트 -->
	<select id="getMovie" resultType="com.itwillbs.domain.MovieDTO">
		SELECT MOVIE_NUM
		   , TITLE
		   , DIRECOTRNM
		   , ACTORNM
		   , NATION
		   , GENRE
		   , DATE_FORMAT(RELEASEDATE, '%Y-%m-%d') AS RELEASEDATE
		   , SUBSTRING_INDEX(POSTERURL, '|', 1) AS POSTERURL
		   , PLOT
		   , RUNTIME
		   , LEFT(RATING, 2) RATING
		   , THEMESONG
		   , SOUNDTRACK
		   , a.RANK AS "RANK"
		   , IF(CURRENT_DATE() BETWEEN DATE(RELEASEDATE) AND (
				 SELECT MAX(DATE_FORMAT(s.SC_TIME_END, '%Y-%m-%d'))
				 FROM MOVIE m
				 JOIN CINEMA c ON m.MOVIE_NUM = c.MOVIE_NUM
				 JOIN SCREEN s ON c.CI_NUM = s.CI_NUM
				 WHERE m.MOVIE_NUM = a.MOVIE_NUM
			 ), 'showMovie', 'notShow') AS 'show'
			 , a.rn AS 'rn'
		FROM (
		    SELECT *, RANK() OVER (ORDER BY M.RANK) AS RN
		    FROM MOVIE M
		) a
		ORDER BY a.rn
	</select>
	
	<!-- 상영예정 영화 -->
	<select id="getUpcomingMovies" resultType="map">
		SELECT CAST(MOVIE_NUM AS CHAR) AS MOVIE_NUM
			, TITLE
			, DIRECOTRNM
			, ACTORNM
			, NATION
			, GENRE
			, CONCAT(DATE_FORMAT(RELEASEDATE, '%Y-%m-%d'), 
		           CASE DAYOFWEEK(RELEASEDATE)
		               WHEN 1 THEN '(일)'
		               WHEN 2 THEN '(월)'
		               WHEN 3 THEN '(화)'
		               WHEN 4 THEN '(수)'
		               WHEN 5 THEN '(목)'
		               WHEN 6 THEN '(금)'
		               WHEN 7 THEN '(토)'
		           END
		      ) AS RELEASEDATE
			, CAST(DATEDIFF(M.RELEASEDATE, CURRENT_DATE()) AS CHAR) AS D_DAY
			, SUBSTRING_INDEX(POSTERURL, '|', 1) AS POSTERURL
			, PLOT
			, RUNTIME
			, if(LEFT(RATING, 2) = "전체", "All", LEFT(RATING, 2)) RATING
			, THEMESONG
			, SOUNDTRACK
			, M.RANK AS 'RANK'
		FROM MOVIE M
		WHERE RELEASEDATE BETWEEN CURRENT_DATE() AND DATE_ADD(CURRENT_DATE(), INTERVAL 30 DAY)
		ORDER BY RELEASEDATE, M.RANK
	</select>
	
	<!-- 상영전 영화 날짜 분류 -->
	<select id="getReleseDate" resultType="java.util.LinkedHashMap">
		SELECT CONCAT(RELEASEDATE, 
		           CASE DAYOFWEEK(RELEASEDATE)
		               WHEN 1 THEN '(일)'
		               WHEN 2 THEN '(월)'
		               WHEN 3 THEN '(화)'
		               WHEN 4 THEN '(수)'
		               WHEN 5 THEN '(목)'
		               WHEN 6 THEN '(금)'
		               WHEN 7 THEN '(토)'
		           END
		    ) AS rDate
			, CAST(COUNT(*) AS CHAR) AS 'COUNT'
		FROM MOVIE
		WHERE CURRENT_DATE() &lt; RELEASEDATE
		GROUP BY RELEASEDATE
		ORDER BY RELEASEDATE;
	</select>
	
	<!-- 상영전 영화 top 3 -->
	<select id="getTop3" resultType="map">
		SELECT CAST(MOVIE_NUM AS CHAR) AS MOVIE_NUM
		    , TITLE
			, DIRECOTRNM
			, ACTORNM
			, NATION
			, GENRE
			, DATE_FORMAT(RELEASEDATE, '%Y-%m-%d') AS RELEASEDATE
			, CAST((RELEASEDATE - CURRENT_DATE()) AS CHAR) AS D_DAY
			, SUBSTRING_INDEX(POSTERURL, '|', 1) AS POSTERURL
			, POSTERURL
			, RUNTIME
			, LEFT(RATING, 2) RATING
			, THEMESONG
			, SOUNDTRACK
			, m.RANK AS 'RANK'
		FROM MOVIE m
		WHERE CURRENT_DATE() &lt; RELEASEDATE
		ORDER BY RELEASEDATE, m.RANK
		limit 0, 3
	</select>
	
	
	
	<!-- 정렬 -->
	<!-- 예매율순 -->
	<select id="getSortMovies" resultType="java.util.LinkedHashMap">
		SELECT M.MOVIE_NUM
			, M.TITLE
			, M.GENRE
		  	, M.TITLEENG
			, DATE_FORMAT(M.RELEASEDATE, '%Y-%m-%m') AS RELEASEDATE
			, SUBSTRING_INDEX(M.POSTERURL, '|', 1) AS POSTERURL
			, M.RUNTIME
			, M.RATING
			, DATEDIFF(M.RELEASEDATE, CURRENT_DATE()) AS D_DAY
			, IF(C.MOVIE_NUM IS NOT NULL &amp;&amp; CURRENT_DATE() BETWEEN MIN(S.SC_TIME) AND MAX(S.SC_TIME_END), 'SHOWMOVIE', 'NOTSHOW') AS "SHOW"
			, ROUND(SUM(IF(T.SC_NUM IS NOT NULL, 1, 0)) / (SELECT COUNT(*) FROM TICKETPAYMENT) * 100, 1) AS RATE	 
		    , SUM(IFNULL(R.MOVIE_LIKED, 0)) AS MOVIE_LIKED
		FROM TICKETPAYMENT T
		JOIN SCREEN S
		ON T.SC_NUM = S.SC_NUM
		JOIN CINEMA C
		ON S.CI_NUM = C.CI_NUM
		RIGHT OUTER JOIN MOVIE M
		ON C.MOVIE_NUM = M.MOVIE_NUM
		LEFT OUTER JOIN REVIEW R
		ON M.MOVIE_NUM = R.MOVIE_NUM
		GROUP BY M.MOVIE_NUM
		<choose>
		<when test="SORTSTR == 'SORTRATE'">
			ORDER BY RATE DESC, M.RANK DESC;
		</when>
		<when test="SORTSTR == 'SORTLIKED'">
			ORDER BY SUM(IFNULL(R.MOVIE_LIKED, 0)) DESC;
		</when>
		<when test="SORTSTR == 'SORTRANK'">
			ORDER BY M.RANK;
		</when>
		</choose>
	</select>
	
	
	<!-- 영화 상세정보 -->
	<select id="movieInfo" resultType="com.itwillbs.domain.MovieDTO" parameterType="java.lang.Integer">
		SELECT M.MOVIE_NUM
			, M.TITLE
			, M.DIRECOTRNM
			, M.ACTORNM
			, M.NATION
			, M.GENRE
		  	, M.TITLEENG
	  	 	, M.STILLURL
            , M.VODURL
			, DATE_FORMAT(M.RELEASEDATE, '%Y-%m-%m') AS RELEASEDATE
			, SUBSTRING_INDEX(M.POSTERURL, '|', 1) AS POSTERURL
			, M.RUNTIME
			, M.RATING
			, DATEDIFF(M.RELEASEDATE, CURRENT_DATE()) AS D_DAY
			, IF(C.MOVIE_NUM IS NOT NULL &amp;&amp; CURRENT_DATE() BETWEEN MIN(S.SC_TIME) AND MAX(S.SC_TIME_END), 'SHOWMOVIE', 'NOTSHOW') AS "SHOW"
			, ROUND(SUM(IF(T.SC_NUM IS NOT NULL, 1, 0)) / (SELECT COUNT(*) FROM TICKETPAYMENT) * 100, 1) AS RATE	 
		    , SUM(IFNULL(R.MOVIE_LIKED, 0)) AS MOVIE_LIKED
		FROM TICKETPAYMENT T
		JOIN SCREEN S
		ON T.SC_NUM = S.SC_NUM
		JOIN CINEMA C
		ON S.CI_NUM = C.CI_NUM
		RIGHT OUTER JOIN MOVIE M
		ON C.MOVIE_NUM = M.MOVIE_NUM
		LEFT OUTER JOIN REVIEW R
		ON M.MOVIE_NUM = R.MOVIE_NUM
		GROUP BY M.MOVIE_NUM
		HAVING M.MOVIE_NUM = #{MOVIE_NUM}
		ORDER BY M.RANK;
	</select>
	
	
	<!-- 영화 찜하기전 검색 기능 -->
	<select id="getBookmark" resultType="java.lang.Integer">
		SELECT IF(COUNT(*) != 0, TRUE, FALSE)
		FROM BOOKMARK
		WHERE MEM_NUM = (SELECT MEM_NUM
					     FROM MEMBERS
					     WHERE MEM_ID = #{MEMBER_ID})
		AND MOVIE_NUM = #{MOVIE_NUM}
	</select>
	<!-- 찜한 정보 저장 -->
	<insert id="insertBookmark">
		INSERT INTO BOOKMARK(MEM_NUM, MOVIE_NUM)
		VALUES((SELECT MEM_NUM
			    FROM MEMBERS
			    WHERE MEM_ID = #{MEMBER_ID}), #{MOVIE_NUM})
	</insert>
	<!-- 찜한 정보 삭제 -->
	<delete id="deleteBookmark">
		DELETE FROM BOOKMARK
		WHERE MEM_ID = #{MEMBER_ID}
		AND MOVIE_NUM = #{MOVIE_NUM}
	</delete>
	
	
	<!-- 예매1위 영화 광고 ifream -->
	<select id="getAdMovie" resultType="map">
		SELECT MOVIE_NUM
			 , SUBSTRING_INDEX(POSTERURL, '|', 1) AS POSTERURL
		FROM MOVIE 
		WHERE POSTERURL IS NOT NULL
		ORDER BY MOVIE_NUM DESC
		LIMIT 0, 1;
	</select>
	
	
	<select id="pointChart" resultType="map">
		SELECT MOVIE_NUM
			, ROUND(SUM(CP_EFFECT) / COUNT(*) * 100, 0) AS CP_EFFECT
			, ROUND(SUM(CP_STORY) / COUNT(*) * 100, 0) AS CP_STORY
			, ROUND(SUM(CP_VISUAL) / COUNT(*) * 100, 0) AS CP_VISUAL
			, ROUND(SUM(CP_ACTING) / COUNT(*) * 100, 0) AS CP_ACTING
			, ROUND(SUM(CP_OST) / COUNT(*) * 100, 0) AS CP_OST
			, ROUND(SUM(EM_IMMERSE) / COUNT(*) * 100, 0) AS EM_IMMERSE
			, ROUND(SUM(EM_IMPRESS) / COUNT(*) * 100, 0) AS EM_IMPRESS
			, ROUND(SUM(EM_RELSTRESS) / COUNT(*) * 100, 0) AS EM_RELSTRESS
			, ROUND(SUM(EM_PLEASURE) / COUNT(*) * 100, 0) AS EM_PLEASURE
			, ROUND(SUM(EM_TENSION) / COUNT(*) * 100, 0) AS EM_TENSION
		FROM REVIEW
		WHERE MOVIE_NUM = #{MOVIE_NUM};
	</select>
	
	
	<!-- 관련 영화 -->
	<select id="getRelMovies" resultType="map">
		SELECT MOVIE_NUM
			, TITLE
			, TITLEENG
			, SUBSTRING_INDEX(POSTERURL, '|', 1) AS POSTERURL
			, GENRE
			, if(LEFT(RATING, 2) = "전체", "All", LEFT(RATING, 2)) RATING
			, DATE_FORMAT(RELEASEDATE, '%Y-%m-%d') AS RELEASEDATE
		    , DATEDIFF(M.RELEASEDATE, CURRENT_DATE()) AS D_DAY
		FROM MOVIE M
		WHERE POSTERURL IS NOT NULL
		<if test="MOVIE_NUM != NULL">
		AND MOVIE_NUM &lt;&gt; #{MOVIE_NUM}
		</if>
        AND POSTERURL &lt;&gt; ""
        <choose>
	        <when test="MOVIE_NUM != null">
	        AND GENRE REGEXP (SELECT REPLACE(genre, ',', '|') AS GENRE
			        		  FROM MOVIE
			        		  WHERE MOVIE_NUM = #{MOVIE_NUM})
	        ORDER BY M.RANK
	        LIMIT 6
	        </when>
	        <when test="MEM_ID != null">
			AND GENRE REGEXP (SELECT REPLACE(genre, ',', '|') AS GENRE
							  FROM MOVIE
							  WHERE MOVIE_NUM IN (SELECT MOVIE_NUM
											      FROM BOOKMARK
												  WHERE MEM_ID = #{MEMBER_ID})
							  GROUP BY GENRE
							  ORDER BY COUNT(GENRE) DESC
					   		  limit 1)
			ORDER BY M.RANK
			LIMIT 10
			</when>
	    </choose>
	</select>
	
	
	
	<!-- 리뷰 검색 -->
	<select id="getReviewUser" resultType="String">
		SELECT REVIEW_CONTENT
		FROM REVIEW
		WHERE MOVIE_NUM = #{MOVIE_NUM}
		AND MEM_NUM = (SELECT MEM_NUM
				       FROM MEMBERS
				       WHERE MEM_ID = #{MEMBER_ID})
	</select>
	
	<!-- 평점(리뷰) 저장 -->
	<insert id="insertReview">
		INSERT INTO REVIEW(
			MOVIE_NUM
			, MEM_NUM
			, REVIEW_DATE
			, REVIEW_CONTENT
			, RECOMMEND
			, MOVIE_LIKED
			, CP_EFFECT
			, CP_STORY
			, CP_VISUAL
			, CP_ACTING
			, CP_OST
			, EM_IMMERSE
			, EM_IMPRESS
			, EM_RELSTRESS
			, EM_PLEASURE
			, EM_TENSION)
		VALUES(
			#{MOVIE_NUM}
			, (SELECT MEM_NUM
		       FROM MEMBERS
		       WHERE MEM_ID = #{MEMBER_ID})
			, NOW()
			, #{REVIEW_CONTENT}
			, 0
			, #{MOVIE_LIKED}
			, #{EFFECT}
			, #{STORY}
			, #{VISUAL}
			, #{ACTING}
			, #{OST}
			, #{IMMERSE}
			, #{IMPRESS}
			, #{RELSTRESS}
			, #{PLEASURE}
			, #{TENSION}
		);
	</insert>
	
	<!-- 리뷰 -->
	<select id="getReview" resultType="java.util.LinkedHashMap" parameterType="map">
		select REVIEW_NUM
			, MOVIE_NUM
			, MEM_ID
			, DATE_FORMAT(REVIEW_DATE, '%Y-%m-%d') AS REVIEW_DATE
			, REVIEW_CONTENT
			, RECOMMEND
		FROM REVIEW
		WHERE 1=1
		
		<if test="MEM_ID != null and MOVIE_NUM != null">
		AND MEM_ID = (SELECT MEM_NUM
					  FROM MEMBERS
					  WHERE MEM_ID = #{MEMBER_ID})
		AND MOVIE_NUM = #{MOVIE_NUM}
		</if>
		
		<if test="MEM_ID == null and MOVIE_NUM != null"> 
		AND MOVIE_NUM = #{MOVIE_NUM}
        <choose>
            <when test="SORT_TAB.equals('most')">
                ORDER BY REVIEW_DATE
            </when>
            <when test="SORT_TAB.equals('recom')">
                ORDER BY RECOMMEND DESC
            </when>
        </choose>
			LIMIT #{startRow}, #{pageSize};
		</if>
	</select>
	
	<select id="getMaxPage" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM REVIEW
		where MOVIE_NUM = #{num};
	</select>
	
	<!-- 추천수 업데이트  -->
	<update id="updateRecommend" >
		UPDATE REVIEW
		SET RECOMMEND = RECOMMEND + 1
		WHERE REVIEW_NUM = #{REVIEW_NUM};
	</update>
	
	<select id="getRecommend" resultType="java.lang.String">
		SELECT RECOMMEND
		FROM REVIEW
		WHERE REVIEW_NUM = #{REVIEW_NUM}
		limit 0 , 1;
	</select>
<!-- 	WHERE REVIEW_NUM = #{REVIEW_NUM}; -->
	
	<!-- 리뷰 추천 유저 정보 검색 및 저장 -->
	<select id="reUserCheck" resultType="java.lang.Integer">
		SELECT count(*)
		FROM RECOMMEND_CHECK
		WHERE REVIEW_NUM = #{REVIEW_NUM}
		AND MEM_NUM = (SELECT MEM_NUM
					   FROM MEMBERS
					   WHERE MEM_ID = #{MEMBER_ID}) 
	</select>
	
	<!-- 리뷰 추천유저 정보 저장 -->
	<insert id="reUserinsert">
		INSERT INTO RECOMMEND_CHECK(REVIEW_NUM, MEM_ID)
		VALUES(#{REVIEW_NUM}, (SELECT MEM_NUM
							   FROM MEMBERS
							   WHERE MEM_ID = #{MEMBER_ID}))
	</insert>
	<!-- 리뷰 수정 -->
	<update id="updateReview">
		UPDATE REVIEW
		SET REVIEW_CONTENT = #{REVIEW_CONTENT}
		WHERE REVIEW_NUM = #{REVIEW_NUM}
	</update>
	<!-- 리뷰삭제 -->
	<delete id="deleteReview">
		DELETE FROM REVIEW
		WHERE REVIEW_NUM = #{REVIEW_NUM};
	</delete>
	
	
	<select id="getMyMovieCount" resultType="map">
		SELECT (SELECT COUNT(*)
				FROM REVIEW
		        WHERE MEM_NUM = (SELECT MEM_NUM
							     FROM MEMBERS
							     WHERE MEM_ID = #{MEMBER_ID})) AS REVIEW
		    	,    
				(SELECT COUNT(*)
				FROM BOOKMARK
		        WHERE MEM_NUM = (SELECT MEM_NUM
							     FROM MEMBERS
							     WHERE MEM_ID = #{MEMBER_ID})) AS BOOKMARK
		FROM DUAL;
	</select>
	
	<select id="getMyMovieList" resultType="java.util.LinkedHashMap">
    <choose>
	    <when test="LABEL.equals('bookmark')">
	        SELECT M.MOVIE_NUM
	            , M.TITLE
	            , M.TITLEENG
	            , M.GENRE
	            , DATE_FORMAT(M.RELEASEDATE, '%Y-%m-%d') AS RELEASEDATE
	            , SUBSTRING_INDEX(M.POSTERURL, '|', 1) AS POSTERURL
	            , M.RATING
	            , B.BOOKMARK_DATE AS SAVEDDATE
	        FROM MOVIE M
	        RIGHT OUTER JOIN BOOKMARK B ON M.MOVIE_NUM = B.MOVIE_NUM
	        WHERE B.MEM_NUM = (SELECT MEM_NUM
						       FROM MEMBERS
						       WHERE MEM_ID = #{MEMBER_ID})
	    </when>
	    <when test="LABEL.equals('review')">
	        SELECT M.MOVIE_NUM
	            , M.TITLE
	            , M.TITLEENG
	            , M.GENRE
	            , DATE_FORMAT(M.RELEASEDATE, '%Y-%m-%d') AS RELEASEDATE
	            , SUBSTRING_INDEX(M.POSTERURL, '|', 1) AS POSTERURL
	            , M.RATING
	            , R.REVIEW_NUM
	            , R.REVIEW_DATE AS SAVEDDATE
	            , R.REVIEW_CONTENT
	        FROM MOVIE M
	        RIGHT OUTER JOIN REVIEW R ON M.MOVIE_NUM = R.MOVIE_NUM
	        WHERE R.MEM_NUM = (SELECT MEM_NUM
						       FROM MEMBERS
						       WHERE MEM_ID = #{MEMBER_ID});
	    </when>
	    <when test="LABEL.equals('watched')">
	        SELECT DISTINCT
	        	M.MOVIE_NUM
	            , M.TITLE
	            , M.TITLEENG
	            , M.GENRE
	            , DATE_FORMAT(M.RELEASEDATE, '%Y-%m-%d') AS RELEASEDATE
	            , SUBSTRING_INDEX(M.POSTERURL, '|', 1) AS POSTERURL
	            , M.RATING
	            , T.TP_TIME AS SAVEDDATE
	            , COUNT(*)
	        FROM MOVIE M
	        JOIN CINEMA C ON M.MOVIE_NUM = C.MOVIE_NUM
	        JOIN SCREEN S ON C.CI_NUM = S.CI_NUM
	        JOIN TICKETPAYMENT T ON S.SC_NUM = T.SC_NUM
	        JOIN MEMBERS M2 ON T.MEMBER_NUM = M2.MEMBER_NUM
	        WHERE T.MEM_NUM = (SELECT MEM_NUM
	                              FROM MEMBERS
	                              WHERE MEM_ID = #{MEMBER_ID})
	    </when>
	</choose>
	
	<choose>
	    <when test="SORTTYPE.equals('savedDate')">
	        ORDER BY SAVEDDATE
	    </when>
	    <when test="SORTTYPE.equals('releaseDate')">
	        ORDER BY RELEASEDATE
	    </when>
	</choose>
	</select>
	
	
	<!--  ================================ 상영시간표 ================================ -->
	<!-- 영화별 상영 시간표 페이지의 지역 구하기 -->
	<select id="getMovieSchedule" resultType="map">
		SELECT TH_REGION
		FROM CINEMA C
		JOIN THEATER T ON C.TH_NUM = T.TH_NUM
		WHERE C.MOVIE_NUM = #{MOVIE_NUM}
		GROUP BY TH_REGION;
	</select>
	
	<!-- 상세정보 페이지 상영시간표 -->
	<select id="getThMovies" resultType="map" parameterType="map">
		SELECT C.CI_NUM AS CI_NUM
			, C.TH_NUM AS TH_NUM
			, S.SC_NUM AS SC_NUM
			, S.ROW AS "ROW"
			, S.COL AS "COL"
	        , DATE_FORMAT(S.SC_TIME, '%H:%i') AS SC_TIME
	        , DATE_FORMAT(S.SC_TIME_END, '%H:%i') AS SC_TIME_END
			, T.TH_NAME AS TH_NAME
			, T.TH_REGION AS TH_REGION
			, T.TH_REGIONEng AS TH_REGIONEng 
			, T.TH_NAMEEng AS TH_NAMEEng
			, T.TH_NUMBER AS TH_NUMBER
		FROM CINEMA C
		JOIN SCREEN S ON C.CI_NUM = S.CI_NUM
		JOIN THEATER T ON C.TH_NUM = T.TH_NUM
		WHERE TH_REGION = #{TH_REGION}
		AND DATE_FORMAT(S.SC_TIME, '%Y-%m-%d') = #{C_DATE}
		AND MOVIE_NUM = #{MOVIE_NUM};
	</select>
	
	

	<!-- 채현 메인 상영예정 영화 디데이 리스트 -->
	<select id="getMovie3" resultType="java.util.LinkedHashMap">
		SELECT MOVIE_NUM
			, TITLE
			, DIRECOTRNM
			, ACTORNM
			, NATION
			, GENRE
			, RELEASEDATE
			, SUBSTRING_INDEX(POSTERURL, '|', 1) AS POSTERURL
			, PLOT
			, RUNTIME
			, if(LEFT(RATING, 2) = "전체", "All", LEFT(RATING, 2)) RATING
			, THEMESONG
			, SOUNDTRACK
			, RELEASEDTS
			, RELEASEDTE
			, m.RANK AS 'RANK'
			, DATEDIFF(m.RELEASEDATE, CURRENT_DATE()) AS D_DAY
		FROM MOVIE m
		WHERE current_date() &lt; RELEASEDATE
		ORDER BY RELEASEDATE, m.RANK
	</select>
	
	
	
	
	
</mapper>